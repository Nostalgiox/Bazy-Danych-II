--Ubezpieczenie CREATE
CREATE SEQUENCE Ubezpieczenie_seq;
CREATE OR REPLACE PROCEDURE dodaj_ubezpieczenie (
    p_rodzaj_ubezpieczenia IN "Ubezpieczenie"."rodzaj_ubezpieczenia"%TYPE,
    p_kwota_pokrycia IN "Ubezpieczenie"."kwota_pokrycia"%TYPE,
    p_skladka IN "Ubezpieczenie"."skladka"%TYPE
) AS
BEGIN
    INSERT INTO "Ubezpieczenie" ("id", "rodzaj_ubezpieczenia", "kwota_pokrycia", "skladka")
    VALUES (Ubezpieczenie_seq.NEXTVAL, p_rodzaj_ubezpieczenia, p_kwota_pokrycia, p_skladka);
    COMMIT;
END dodaj_ubezpieczenie;
/

--Ubezpieczenie READ
CREATE OR REPLACE FUNCTION odczytaj_ubezpieczenie (
    p_id IN Ubezpieczenie.id%TYPE
) RETURN SYS_REFCURSOR AS
    ubezpieczenie_cursor SYS_REFCURSOR;
BEGIN
    OPEN ubezpieczenie_cursor FOR
        SELECT id, rodzaj_ubezpieczenia, kwota_pokrycia, skladka
        FROM Ubezpieczenie
        WHERE id = p_id;
    RETURN ubezpieczenie_cursor;
END;
/

--Ubezpieczenie UPDATE
CREATE OR REPLACE PROCEDURE aktualizuj_ubezpieczenie (
    p_id IN "Ubezpieczenie"."id"%TYPE,
    p_rodzaj_ubezpieczenia IN "Ubezpieczenie"."rodzaj_ubezpieczenia"%TYPE,
    p_kwota_pokrycia IN "Ubezpieczenie"."kwota_pokrycia"%TYPE,
    p_skladka IN "Ubezpieczenie"."skladka"%TYPE
) AS
BEGIN
    UPDATE "Ubezpieczenie" 
    SET "rodzaj_ubezpieczenia" = p_rodzaj_ubezpieczenia,
        "kwota_pokrycia" = p_kwota_pokrycia,
        "skladka" = p_skladka
    WHERE "id" = p_id;
    COMMIT;
END aktualizuj_ubezpieczenie;
/

--Ubezpieczenie DELETE
CREATE OR REPLACE PROCEDURE usun_ubezpieczenie (
    p_id IN "Ubezpieczenie"."id"%TYPE
) AS
BEGIN
    DELETE FROM "Ubezpieczenie" WHERE "id" = p_id;
    COMMIT;
END usun_ubezpieczenie;
/







CREATE SEQUENCE "Cennik_seq"
START WITH 1
INCREMENT BY 1
NOCACHE;
--Cennik CREATE
CREATE OR REPLACE PROCEDURE "dodaj_cennik" (
    p_kwota_za_dzien IN "Cennik"."kwota_za_dzien"%TYPE,
    p_kwota_za_kilometr IN "Cennik"."kwota_za_kilometr"%TYPE,
    p_kaucja IN "Cennik"."kaucja"%TYPE,
    p_kara IN "Cennik"."kara"%TYPE
) AS
BEGIN
    INSERT INTO "Cennik" ("id", "kwota_za_dzien", "kwota_za_kilometr", "kaucja", "kara")
    VALUES ("Cennik_seq".NEXTVAL, p_kwota_za_dzien, p_kwota_za_kilometr, p_kaucja, p_kara);
    COMMIT;
END "dodaj_cennik";
/
--Cennik SELECT
CREATE OR REPLACE FUNCTION "odczytaj_cennik" (
    p_id IN "Cennik"."id"%TYPE
) RETURN "Cennik"%ROWTYPE AS
    v_cennik "Cennik"%ROWTYPE;
BEGIN
    SELECT * INTO v_cennik FROM "Cennik" WHERE "id" = p_id;
    RETURN v_cennik;
END "odczytaj_cennik";
/
--Cennik UPDATE
CREATE OR REPLACE PROCEDURE "aktualizuj_cennik" (
    p_id IN "Cennik"."id"%TYPE,
    p_kwota_za_dzien IN "Cennik"."kwota_za_dzien"%TYPE,
    p_kwota_za_kilometr IN "Cennik"."kwota_za_kilometr"%TYPE,
    p_kaucja IN "Cennik"."kaucja"%TYPE,
    p_kara IN "Cennik"."kara"%TYPE
) AS
BEGIN
    UPDATE "Cennik"
    SET "kwota_za_dzien" = p_kwota_za_dzien,
        "kwota_za_kilometr" = p_kwota_za_kilometr,
        "kaucja" = p_kaucja,
        "kara" = p_kara
    WHERE "id" = p_id;
    COMMIT;
END "aktualizuj_cennik";
/
--Cennik DELETE
CREATE OR REPLACE PROCEDURE "usun_cennik" (
    p_id IN "Cennik"."id"%TYPE
) AS
BEGIN
    DELETE FROM "Cennik" WHERE "id" = p_id;
    COMMIT;
END "usun_cennik";
/
--Cennik zwraca wszystkie rekordy w tabeli
CREATE OR REPLACE FUNCTION "odczytaj_wszystkie_cenniki"
RETURN SYS_REFCURSOR AS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR SELECT * FROM "Cennik";
    RETURN v_cursor;
END "odczytaj_wszystkie_cenniki";
/







CREATE SEQUENCE Adres_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE Klienci_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE PROCEDURE dodaj_adres (
    p_kod_pocztowy IN "Adres"."kod_pocztowy"%TYPE,
    p_miejscowosc IN "Adres"."miejscowosc"%TYPE,
    p_ulica IN "Adres"."ulica"%TYPE,
    p_nr_domu IN "Adres"."nr_domu"%TYPE,
    p_nr_lokalu IN "Adres"."nr_lokalu"%TYPE
) AS
BEGIN
    INSERT INTO "Adres" ("id", "kod_pocztowy", "miejscowosc", "ulica", "nr_domu", "nr_lokalu")
    VALUES (Adres_seq.NEXTVAL, p_kod_pocztowy, p_miejscowosc, p_ulica, p_nr_domu, p_nr_lokalu);
    COMMIT;
END dodaj_adres;

CREATE OR REPLACE FUNCTION odczytaj_wszystkie_adresy RETURN SYS_REFCURSOR AS
    c_adres SYS_REFCURSOR;
BEGIN
    OPEN c_adres FOR SELECT * FROM "Adres";
    RETURN c_adres;
END odczytaj_wszystkie_adresy;

CREATE OR REPLACE PROCEDURE aktualizuj_adres (
    p_id IN "Adres"."id"%TYPE,
    p_kod_pocztowy IN "Adres"."kod_pocztowy"%TYPE,
    p_miejscowosc IN "Adres"."miejscowosc"%TYPE,
    p_ulica IN "Adres"."ulica"%TYPE,
    p_nr_domu IN "Adres"."nr_domu"%TYPE,
    p_nr_lokalu IN "Adres"."nr_lokalu"%TYPE
) AS
BEGIN
    UPDATE "Adres"
    SET "kod_pocztowy" = p_kod_pocztowy,
        "miejscowosc" = p_miejscowosc,
        "ulica" = p_ulica,
        "nr_domu" = p_nr_domu,
        "nr_lokalu" = p_nr_lokalu
    WHERE "id" = p_id;
    COMMIT;
END aktualizuj_adres;

CREATE OR REPLACE PROCEDURE usun_adres (
    p_id IN "Adres"."id"%TYPE
) AS
BEGIN
    DELETE FROM "Adres" WHERE "id" = p_id;
    COMMIT;
END usun_adres;



CREATE OR REPLACE PROCEDURE dodaj_klienta (
    p_imie IN "Klienci"."imie"%TYPE,
    p_nazwisko IN "Klienci"."nazwisko"%TYPE,
    p_id_adresu IN "Klienci"."id_adresu"%TYPE,
    p_nr_dowodu IN "Klienci"."nr_dowodu"%TYPE,
    p_pesel IN "Klienci"."pesel"%TYPE
) AS
BEGIN
    INSERT INTO "Klienci" ("id", "imie", "nazwisko", "id_adresu", "nr_dowodu", "pesel")
    VALUES (Klienci_seq.NEXTVAL, p_imie, p_nazwisko, p_id_adresu, p_nr_dowodu, p_pesel);
    COMMIT;
END dodaj_klienta;

CREATE OR REPLACE FUNCTION odczytaj_wszystkich_klientow RETURN SYS_REFCURSOR AS
    c_klienci SYS_REFCURSOR;
BEGIN
    OPEN c_klienci FOR SELECT * FROM "Klienci";
    RETURN c_klienci;
END odczytaj_wszystkich_klientow;

CREATE OR REPLACE PROCEDURE aktualizuj_klienta (
    p_id IN "Klienci"."id"%TYPE,
    p_imie IN "Klienci"."imie"%TYPE,
    p_nazwisko IN "Klienci"."nazwisko"%TYPE,
    p_id_adresu IN "Klienci"."id_adresu"%TYPE,
    p_nr_dowodu IN "Klienci"."nr_dowodu"%TYPE,
    p_pesel IN "Klienci"."pesel"%TYPE
) AS
BEGIN
    UPDATE "Klienci"
    SET "imie" = p_imie,
        "nazwisko" = p_nazwisko,
        "id_adresu" = p_id_adresu,
        "nr_dowodu" = p_nr_dowodu,
        "pesel" = p_pesel
    WHERE "id" = p_id;
    COMMIT;
END aktualizuj_klienta;

CREATE OR REPLACE PROCEDURE usun_klienta (
    p_id IN "Klienci"."id"%TYPE
) AS
BEGIN
    DELETE FROM "Klienci" WHERE "id" = p_id;
    COMMIT;
END usun_klienta;










CREATE SEQUENCE Dane_techniczne_seq
START WITH 1
INCREMENT BY 1
NOCACHE;

CREATE OR REPLACE PROCEDURE dodaj_dane_techniczne (
    p_pojemnosc_silnika IN "Dane_techniczne"."pojemnosc_silnika"%TYPE,
    p_moc_silnika IN "Dane_techniczne"."moc_silnika"%TYPE,
    p_rodzaj_paliwa IN "Dane_techniczne"."rodzaj_paliwa"%TYPE,
    p_gaz IN "Dane_techniczne"."gaz"%TYPE,
    p_stan_licznika IN "Dane_techniczne"."stan_licznika"%TYPE
) AS
BEGIN
    INSERT INTO "Dane_techniczne" (
        "id", 
        "pojemnosc_silnika", 
        "moc_silnika", 
        "rodzaj_paliwa", 
        "gaz", 
        "stan_licznika"
    ) VALUES (
        Dane_techniczne_seq.NEXTVAL, 
        p_pojemnosc_silnika, 
        p_moc_silnika, 
        p_rodzaj_paliwa, 
        p_gaz, 
        p_stan_licznika
    );
    COMMIT;
END dodaj_dane_techniczne;

CREATE OR REPLACE PROCEDURE aktualizuj_dane_techniczne (
    p_id IN "Dane_techniczne"."id"%TYPE,
    p_pojemnosc_silnika IN "Dane_techniczne"."pojemnosc_silnika"%TYPE,
    p_moc_silnika IN "Dane_techniczne"."moc_silnika"%TYPE,
    p_rodzaj_paliwa IN "Dane_techniczne"."rodzaj_paliwa"%TYPE,
    p_gaz IN "Dane_techniczne"."gaz"%TYPE,
    p_stan_licznika IN "Dane_techniczne"."stan_licznika"%TYPE
) AS
BEGIN
    UPDATE "Dane_techniczne" 
    SET "pojemnosc_silnika" = p_pojemnosc_silnika,
        "moc_silnika" = p_moc_silnika,
        "rodzaj_paliwa" = p_rodzaj_paliwa,
        "gaz" = p_gaz,
        "stan_licznika" = p_stan_licznika
    WHERE "id" = p_id;
    COMMIT;
END aktualizuj_dane_techniczne;

CREATE OR REPLACE PROCEDURE usun_dane_techniczne (
    p_id IN "Dane_techniczne"."id"%TYPE
) AS
BEGIN
    -- Usuń rekordy zależne w tabeli Pojazd
    DELETE FROM "Pojazd" WHERE "id_dane_techniczne" = p_id;
    
    -- Usuń dane techniczne
    DELETE FROM "Dane_techniczne" WHERE "id" = p_id;
    
    COMMIT;
END usun_dane_techniczne;

CREATE OR REPLACE FUNCTION odczytaj_dane_techniczne (
    p_id IN "Dane_techniczne"."id"%TYPE
) RETURN "Dane_techniczne"%ROWTYPE AS
    dane_techniczne "Dane_techniczne"%ROWTYPE;
BEGIN
    SELECT * INTO dane_techniczne FROM "Dane_techniczne" WHERE "id" = p_id;
    RETURN dane_techniczne;
END odczytaj_dane_techniczne;




CREATE SEQUENCE "Pojazd_seq"
START WITH 1
INCREMENT BY 1
NOCACHE;
CREATE OR REPLACE PROCEDURE dodaj_pojazd (
    p_Marka IN "Pojazd"."Marka"%TYPE,
    p_Model IN "Pojazd"."Model"%TYPE,
    p_Rok_produkcji IN "Pojazd"."Rok_produkcji"%TYPE,
    p_Kolor IN "Pojazd"."Kolor"%TYPE,
    p_id_dane_techniczne IN "Pojazd"."id_dane_techniczne"%TYPE,
    p_typ_pojazdu IN "Pojazd"."typ_pojazdu"%TYPE,
    p_dostepny IN "Pojazd"."dostepny"%TYPE,
    p_numer_VIN IN "Pojazd"."numer_VIN"%TYPE
) AS
BEGIN
    INSERT INTO "Pojazd" (
        "id", 
        "Marka", 
        "Model", 
        "Rok_produkcji", 
        "Kolor", 
        "id_dane_techniczne", 
        "typ_pojazdu", 
        "dostepny", 
        "numer_VIN"
    ) VALUES (
        "Pojazd_seq".NEXTVAL, 
        p_Marka, 
        p_Model, 
        p_Rok_produkcji, 
        p_Kolor, 
        p_id_dane_techniczne, 
        p_typ_pojazdu, 
        p_dostepny, 
        p_numer_VIN
    );
    COMMIT;
END dodaj_pojazd;
CREATE OR REPLACE PROCEDURE aktualizuj_pojazd (
    p_id IN "Pojazd"."id"%TYPE,
    p_Marka IN "Pojazd"."Marka"%TYPE,
    p_Model IN "Pojazd"."Model"%TYPE,
    p_Rok_produkcji IN "Pojazd"."Rok_produkcji"%TYPE,
    p_Kolor IN "Pojazd"."Kolor"%TYPE,
    p_id_dane_techniczne IN "Pojazd"."id_dane_techniczne"%TYPE,
    p_typ_pojazdu IN "Pojazd"."typ_pojazdu"%TYPE,
    p_dostepny IN "Pojazd"."dostepny"%TYPE,
    p_numer_VIN IN "Pojazd"."numer_VIN"%TYPE
) AS
BEGIN
    UPDATE "Pojazd" 
    SET "Marka" = p_Marka,
        "Model" = p_Model,
        "Rok_produkcji" = p_Rok_produkcji,
        "Kolor" = p_Kolor,
        "id_dane_techniczne" = p_id_dane_techniczne,
        "typ_pojazdu" = p_typ_pojazdu,
        "dostepny" = p_dostepny,
        "numer_VIN" = p_numer_VIN
    WHERE "id" = p_id;
    COMMIT;
END aktualizuj_pojazd;

create or replace PROCEDURE usun_pojazd (
    p_id IN "Pojazd"."id"%TYPE
) AS
BEGIN
    -- Usuń rekordy zależne w tabeli Historia
    DELETE FROM "Historia" WHERE "id_pojazd" = p_id;

    -- Usuń rekordy zależne w tabeli Umowy_wypozyczenia i powiązanych tabelach Zwroty oraz Forma_platnosci
    DELETE FROM "Zwroty" WHERE "id_umowy" IN (SELECT "id" FROM "Umowy_wypozyczenia" WHERE "id_pojazdu" = p_id);
    DELETE FROM "Forma_platnosci" WHERE "id_umowy" IN (SELECT "id" FROM "Umowy_wypozyczenia" WHERE "id_pojazdu" = p_id);
    DELETE FROM "Umowy_wypozyczenia" WHERE "id_pojazdu" = p_id;

    -- Usuń pojazd
    DELETE FROM "Pojazd" WHERE "id" = p_id;

    -- Usuń dane techniczne
    DELETE FROM "Dane_techniczne" WHERE "id" = (SELECT "id_dane_techniczne" FROM "Pojazd" WHERE "id" = p_id);

    COMMIT;
END usun_pojazd;

CREATE OR REPLACE FUNCTION odczytaj_pojazd (
    p_id IN "Pojazd"."id"%TYPE
) RETURN SYS_REFCURSOR AS
    c SYS_REFCURSOR;
BEGIN
    OPEN c FOR
        SELECT * FROM "Pojazd" WHERE "id" = p_id;
    RETURN c;
END odczytaj_pojazd;


-- Tworzenie procedury

CREATE SEQUENCE formy_platnosci_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;


CREATE OR REPLACE PROCEDURE dodaj_umowe (
    p_id_pojazdu IN "Umowy_wypozyczenia"."id_pojazdu"%TYPE,
    p_id_klienta IN "Umowy_wypozyczenia"."id_klienta"%TYPE,
    p_id_ubezpieczenia IN "Umowy_wypozyczenia"."id_ubezpieczenia"%TYPE,
    p_data_wypozyczenia IN "Umowy_wypozyczenia"."data_wypozyczenia"%TYPE,
    p_data_oddania IN "Umowy_wypozyczenia"."data_oddania"%TYPE,
    p_status IN "Umowy_wypozyczenia"."status"%TYPE,
    p_rodzaj_platnosci IN "Forma_platnosci"."rodzaj_platnosci"%TYPE,
    p_nr_karty IN "Forma_platnosci"."nr_karty"%TYPE,
    p_data_wygasniecia_karty IN "Forma_platnosci"."data_wygasniecia_karty"%TYPE,
    p_CVV IN "Forma_platnosci"."CVV"%TYPE
) AS
    v_stan_licznika_przed "Dane_techniczne"."stan_licznika"%TYPE;
    v_umowa_id "Umowy_wypozyczenia"."id"%TYPE;
    v_laczna_cena NUMBER;
BEGIN
    -- Pobierz stan licznika z tabeli Dane_techniczne
    SELECT "stan_licznika" INTO v_stan_licznika_przed
    FROM "Dane_techniczne"
    WHERE "id" = (SELECT "id_dane_techniczne" FROM "Pojazd" WHERE "id" = p_id_pojazdu);

    -- Pobierz kolejną wartość z sekwencji
    v_umowa_id := SEQ_UMOWY_WYPOZYCZENIA.NEXTVAL;

    -- Dodaj nową umowę
    INSERT INTO "Umowy_wypozyczenia" (
        "id", "id_pojazdu", "id_klienta", "id_ubezpieczenia", "data_wypozyczenia", "data_oddania", "status", "stan_licznika_przed"
    ) VALUES (
        v_umowa_id, p_id_pojazdu, p_id_klienta, p_id_ubezpieczenia, p_data_wypozyczenia, p_data_oddania, p_status, v_stan_licznika_przed
    );

    -- Dodaj dane płatności
    INSERT INTO "Forma_platnosci" (
        "id", "id_umowy", "rodzaj_platnosci", "nr_karty", "data_wygasniecia_karty", "CVV"
    ) VALUES (
        formy_platnosci_seq.NEXTVAL, v_umowa_id, p_rodzaj_platnosci, p_nr_karty, p_data_wygasniecia_karty, p_CVV
    );

    -- Oblicz łączną cenę wynajmu
    v_laczna_cena := oblicz_laczna_cene_wynajmu(v_umowa_id);

    -- Aktualizuj umowę o łączną cenę wynajmu
    UPDATE "Umowy_wypozyczenia"
    SET "laczna_cena" = v_laczna_cena
    WHERE "id" = v_umowa_id;

    -- Ustaw pojazd jako niedostępny
    UPDATE "Pojazd"
    SET "dostepny" = 'N'
    WHERE "id" = p_id_pojazdu;

    COMMIT;
END dodaj_umowe;


CREATE OR REPLACE PROCEDURE usun_umowe (
    p_id IN "Umowy_wypozyczenia"."id"%TYPE
) AS
BEGIN
    -- Usuń rekordy zależne w tabeli Zwroty
    DELETE FROM "Zwroty" WHERE "id_umowy" = p_id;

    -- Usuń rekordy zależne w tabeli Forma_platnosci
    DELETE FROM "Forma_platnosci" WHERE "id_umowy" = p_id;

    -- Usuń umowę
    DELETE FROM "Umowy_wypozyczenia" WHERE "id" = p_id;

    COMMIT;
END usun_umowe;

CREATE OR REPLACE PROCEDURE edytuj_umowe (
    p_id IN "Umowy_wypozyczenia"."id"%TYPE,
    p_id_pojazdu IN "Umowy_wypozyczenia"."id_pojazdu"%TYPE,
    p_id_klienta IN "Umowy_wypozyczenia"."id_klienta"%TYPE,
    p_id_ubezpieczenia IN "Umowy_wypozyczenia"."id_ubezpieczenia"%TYPE,
    p_data_wypozyczenia IN "Umowy_wypozyczenia"."data_wypozyczenia"%TYPE,
    p_data_oddania IN "Umowy_wypozyczenia"."data_oddania"%TYPE,
    p_status IN "Umowy_wypozyczenia"."status"%TYPE
) AS
BEGIN
    -- Aktualizuj umowę
    UPDATE "Umowy_wypozyczenia"
    SET "id_pojazdu" = p_id_pojazdu,
        "id_klienta" = p_id_klienta,
        "id_ubezpieczenia" = p_id_ubezpieczenia,
        "data_wypozyczenia" = p_data_wypozyczenia,
        "data_oddania" = p_data_oddania,
        "status" = p_status
    WHERE "id" = p_id;

    COMMIT;
END edytuj_umowe;


CREATE SEQUENCE SEQ_UMOWY_WYPOZYCZENIA
START WITH 1
INCREMENT BY 1
NOMAXVALUE
NOCYCLE;

CREATE OR REPLACE TRIGGER sprawdz_data_oddania
BEFORE INSERT OR UPDATE ON "Umowy_wypozyczenia"
FOR EACH ROW
BEGIN
    IF :NEW."data_oddania" < SYSDATE AND :NEW."status" = 'aktywna' THEN
        :NEW."status" := 'zaległa';
    END IF;
END;

CREATE SEQUENCE Historia_seq
  START WITH 1
  INCREMENT BY 1
  NOCACHE
  NOCYCLE;

CREATE OR REPLACE PROCEDURE dodaj_historie (
    p_id_pojazdu IN "Pojazd"."id"%TYPE,
    p_id_cennika IN "Cennik"."id"%TYPE
) AS
BEGIN
    INSERT INTO "Historia" (
        "id",
        "id_pojazd",
        "id_cennik",
        "od",
        "do"
    ) VALUES (
        Historia_seq.NEXTVAL,
        p_id_pojazdu,
        p_id_cennika,
        SYSDATE,
        NULL
    );

    COMMIT;
END dodaj_historie;


CREATE SEQUENCE cennik_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE OR REPLACE PROCEDURE dodaj_cennik (
    p_kwota_za_dzien IN NUMBER,
    p_kaucja IN NUMBER,
    p_kara IN NUMBER
) IS
BEGIN
    INSERT INTO "Cennik" ("id", "kwota_za_dzien", "kaucja", "kara")
    VALUES (cennik_seq.NEXTVAL, p_kwota_za_dzien, p_kaucja, p_kara);
END;


create or replace FUNCTION oblicz_laczna_cene_wynajmu (
    p_id_umowy IN "Umowy_wypozyczenia"."id"%TYPE
) RETURN NUMBER IS
    v_kwota_za_dzien "Cennik"."kwota_za_dzien"%TYPE;
    v_kaucja "Cennik"."kaucja"%TYPE;
    v_skladka "Ubezpieczenie"."skladka"%TYPE;
    v_data_wypozyczenia "Umowy_wypozyczenia"."data_wypozyczenia"%TYPE;
    v_data_oddania "Umowy_wypozyczenia"."data_oddania"%TYPE;
    v_id_pojazdu "Umowy_wypozyczenia"."id_pojazdu"%TYPE;
    v_id_cennik "Historia"."id_cennik"%TYPE;
    v_id_ubezpieczenia "Umowy_wypozyczenia"."id_ubezpieczenia"%TYPE;
    v_laczna_cena NUMBER;
    v_dni_wypozyczenia NUMBER;
BEGIN
    BEGIN
        -- Pobierz daty wypożyczenia i oddania oraz id_pojazdu i id_ubezpieczenia
        SELECT "data_wypozyczenia", "data_oddania", "id_pojazdu", "id_ubezpieczenia"
        INTO v_data_wypozyczenia, v_data_oddania, v_id_pojazdu, v_id_ubezpieczenia
        FROM "Umowy_wypozyczenia"
        WHERE "id" = p_id_umowy;

        -- Wyświetl pobrane wartości
        DBMS_OUTPUT.PUT_LINE('Data wypożyczenia: ' || v_data_wypozyczenia);
        DBMS_OUTPUT.PUT_LINE('Data oddania: ' || v_data_oddania);
        DBMS_OUTPUT.PUT_LINE('ID pojazdu: ' || v_id_pojazdu);
        DBMS_OUTPUT.PUT_LINE('ID ubezpieczenia: ' || v_id_ubezpieczenia);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'Nie znaleziono umowy wypożyczenia o podanym ID');
    END;

    -- Oblicz liczbę dni wypożyczenia
    v_dni_wypozyczenia := v_data_oddania - v_data_wypozyczenia;
    DBMS_OUTPUT.PUT_LINE('Liczba dni wypożyczenia: ' || v_dni_wypozyczenia);

    BEGIN
        -- Pobierz id_cennik z tabeli Historia
        SELECT "id_cennik"
        INTO v_id_cennik
        FROM "Historia"
        WHERE "id_pojazd" = v_id_pojazdu;

        -- Wyświetl pobrane wartości
        DBMS_OUTPUT.PUT_LINE('ID cennika: ' || v_id_cennik);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20002, 'Nie znaleziono historii dla podanego pojazdu w tym okresie');
    END;

    BEGIN
        -- Pobierz kwotę za dzień i kaucję z tabeli Cennik
        SELECT "kwota_za_dzien", "kaucja"
        INTO v_kwota_za_dzien, v_kaucja
        FROM "Cennik"
        WHERE "id" = v_id_cennik;

        -- Wyświetl pobrane wartości
        DBMS_OUTPUT.PUT_LINE('Kwota za dzień: ' || v_kwota_za_dzien);
        DBMS_OUTPUT.PUT_LINE('Kaucja: ' || v_kaucja);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20003, 'Nie znaleziono cennika o podanym ID');
    END;

    BEGIN
        -- Pobierz składkę z tabeli Ubezpieczenie
        SELECT "skladka"
        INTO v_skladka
        FROM "Ubezpieczenie"
        WHERE "id" = v_id_ubezpieczenia;

        -- Wyświetl pobrane wartości
        DBMS_OUTPUT.PUT_LINE('Składka: ' || v_skladka);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20004, 'Nie znaleziono ubezpieczenia o podanym ID');
    END;

    -- Oblicz łączną cenę
    v_laczna_cena := (v_dni_wypozyczenia * v_kwota_za_dzien) + v_skladka + v_kaucja;
    DBMS_OUTPUT.PUT_LINE('Łączna cena: ' || v_laczna_cena);

    RETURN v_laczna_cena;
END oblicz_laczna_cene_wynajmu;

CREATE OR REPLACE TYPE CennikRecord AS OBJECT (
    id NUMBER,
    kwota VARCHAR2(100)
);

CREATE OR REPLACE TYPE CennikTable AS TABLE OF CennikRecord;

CREATE OR REPLACE PROCEDURE PobierzCennik (p_cennik OUT CennikTable) IS
BEGIN
    SELECT CennikRecord("id", 'kwota za dzien ' || "kwota_za_dzien" || ', kaucja ' || "kaucja" || ', kara ' || "kara")
    BULK COLLECT INTO p_cennik
    FROM "Cennik";
END PobierzCennik;

CREATE OR REPLACE PROCEDURE zapisz_zwrot (
    p_umowa_id IN "Umowy_wypozyczenia"."id"%TYPE,
    p_stan_licznika IN "Dane_techniczne"."stan_licznika"%TYPE
) AS
    v_pojazd_id "Umowy_wypozyczenia"."id_pojazdu"%TYPE;
    v_status "Umowy_wypozyczenia"."status"%TYPE := 'zakonczona';
    v_dostepny "Pojazd"."dostepny"%TYPE := 'T';
BEGIN
    -- Aktualizacja stanu licznika w tabeli "Dane_techniczne"
    UPDATE "Dane_techniczne"
    SET "stan_licznika" = p_stan_licznika
    WHERE "id" = (SELECT "id_dane_techniczne" FROM "Pojazd" WHERE "id" = (SELECT "id_pojazdu" FROM "Umowy_wypozyczenia" WHERE "id" = p_umowa_id));


    -- Aktualizacja dostępności pojazdu
    UPDATE "Pojazd"
    SET "dostepny" = v_dostepny
    WHERE "id" = (SELECT "id_pojazdu" FROM "Umowy_wypozyczenia" WHERE "id" = p_umowa_id);

    -- Aktualizacja statusu umowy na "zakończona"
    UPDATE "Umowy_wypozyczenia"
    SET "status" = v_status
    WHERE "id" = p_umowa_id;

    -- Dodanie danych zwrotu do tabeli "Zwroty"
    INSERT INTO "Zwroty" ("id","id_umowy", "data_oddania", "stan_licznika_po")
    VALUES (zwroty_seq.NEXTVAL, p_umowa_id, SYSDATE, p_stan_licznika);

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END zapisz_zwrot;

CREATE OR REPLACE FUNCTION oblicz_przejechane_kilometry (
    p_miesiac IN VARCHAR2 DEFAULT 'May'
) RETURN SYS_REFCURSOR AS
    v_id_pojazdu NUMBER;
    v_marka VARCHAR2(100);
    v_model VARCHAR2(100);
    v_przejechane_kilometry NUMBER;
    v_result SYS_REFCURSOR;
BEGIN
    OPEN v_result FOR
    SELECT
        p."id" AS id_pojazdu,
        p."Marka",
        p."Model",
        SUM(z."stan_licznika_po" - u."stan_licznika_przed") AS przejechane_kilometry
    FROM
        "Pojazd" p
        JOIN "Umowy_wypozyczenia" u ON p."id" = u."id_pojazdu"
        JOIN "Zwroty" z ON u."id" = z."id_umowy"
    WHERE
        TO_CHAR(z."data_oddania", 'Month', 'NLS_DATE_LANGUAGE=ENGLISH') = p_miesiac
    GROUP BY
        p."id", p."Marka", p."Model"
    ORDER BY
        p."id";

    RETURN v_result;
END oblicz_przejechane_kilometry;















